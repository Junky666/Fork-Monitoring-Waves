/* =====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES===WAVES====WAVES====
 *
 * This is Plukkie's version of the LPoSDistributor script, a revenue sharing application for the WAVES blockchain
 * Many thanks to original version of Marc Jansen and the fork of W0utje.
 *
 * I call this version "The lazy one', due to the automated nature. Only edit once when you install , no more.
 *
 * I do not have any worth mentioning coding experience. In my daily job, I am a hardcore network architect.
 * But I was always inspired by application programming and network automation. I am lazy and like to automate.
 * With my analytic skills I decided to put some effort in javascript and figure out how the original script works.
 * And came to the conclusion that it is worth to make it more 'lazy' style of paying out transaction fees.
 * I am a strong believer of decentralized banking and I like blockchain and you're never to old to learn stuff.
 * Hope you forgers enjoy my contribution to the community.
 *
 * Donations are welcome if you like this version of the script: 'The lazy one'
 * - you can DONATE Waves to alias 'donatewaves@plukkie' or address '3PKQKCw6DdqCvuVgKtZMhNtwzf2aTZygPu6'
 * - you can LEASE your Waves to alias 'plukkieforger' or 'plukkieleasing' or address '3P7ajba4wWLXq6t1G8VaoaVqbUb1dDp8fm4'
 *
 * Thank you and Enjoy!
 *
/* =====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES====WAVES===WAVES====WAVES====

Version 3.2.1
-------------
- date 31 May 2021

- Change on collector appng
  ------------------------------------------------------
  - you can start appng.js now with argument /now or now: "node appng now"
    If will force the collector to lower the "paystopblock" from the
    batchinfo.json file to the current blockheight of the blockchain, minus 1.
    This is only done if the paystopblock lies in the future.
    Now you don't have to wait till the blockchain reached your original
    paystopblock.
    If you do not add argument 'now', the behavior is just the same as
    before, that is, report how long to wait before paystopblock is reached 
    and exit.

    kudos to user ddaqua6 for the usefull request!
    I make use of it thankfully myself :-)

- Change on start_collector.sh
  ------------------------------------------------------
  - Added argument option to start collector with:: start_collector.sh /now
    see above explanation at collector change.

- File changes (+ added, - removed, * updated)
  * appng.js
  * CHANGELOG.txt
  * README.md
  * start_collector.sh


Version 3.2
-------------
- data 14 may 2021

- Changes on core functionality collector script appng.js
  -------------------------------------------------------
  In waves full node version 1.3 the developers added stateChanges;
  In this version, after activation of feature #16 “Ride V5, dApp-to-dApp invocations”,
  the Lease and LeaseCancels script actions are added.
  Therefore, a lease can be created and canceled as a result of an Invoke Script transaction.

  The appng.js module has been modified to incorporate this functionality in the collection
  of the lease and leasecancel transactions.
  In this version of the lpos toolset the transaction type 8, 9 and 16 are analyzed.

- Some minor changes for key/values that moved out of appng.js into config.json
 
- File changes (+ added, - removed, * updated)
  * appng.js
  * config.json
  * CHANGELOG.txt
  * README.md


Version 3.1.1
--------------
- date 1 may 2021

- Changes

  1. Masspayment tool 'masstx.js'
     
     - The tool now requests signing for every transaction. This will return a signed json body with a proof.
       Previous versions has a fixed proof string. 

     - The tool now dumps the payment data for every mass transaction in JSON format to a file.
       This is a failsave if the payment crashes.
       Reason for this is if a crash or payment failure occurs, it is easier to check and resend the payment.
       First a 'sign' file is logged with the json data that needs to signed by the node. This is a POST request.
       The body respons is the 'signed' data and is logged to the 'signed' file.

       The log is as follows:
       Suppose the batchid of the payment is 50. There are 250 leasers. At max 100 transactions currently are 
       supported in a mass transaction. The payment for this batch will be spread over 3 mass transactions.
       Masstx will log six files in the paymentsdone directory (default paymentsDone/ ) :
       - masstx-sign-50-1.json
       - masstx-signed-50-1.json
       - masstx-sign-50-2.json
       - masstx-signed-50-2.json
       - masstx-sign-50-3.json
       - masstx-signed-50-3.json

       If for some reason a mass transfer fails, you can resend it manually with curl or postman.
       The JSON for the body would be the masstx-signed file. The anatomy of the POST request would have
       the following details;
       - POST url : http://localhost:6869/assets/masstransfer
       - json: the masstx-signed-<failed (sub)batch>.json
       - headers: { "Accept": "application/json", "Content-Type": "application/json", "api_key": <your API key> }

  2. Config.json

     - Added key/values for mass transaction signing and transaction broadcasting API urls
       - "txsbroadcast" : "/transactions/broadcast",
       - "masstxsignapisuffix" : "/transactions/sign",

  3. Forktester.py

     - Checks if a control node unreachable alert is already send to telegram.
       Previous versions keep on sending alerts after every forktest.
       Now a file for node-unreachable is logged and only one alert is send.
       When the node is reachable again, the file is removed and a clear message is send.

- File changes (+ added, - removed, * updated)
  * config.json
  * CHANGELOG.txt
  * README.md
  * masstx.js
  * forktester.py


Version 3.1
-------------
- date 7 feb 2021

- New features

  1. Added tool nodeinfo.py
     This tool shows information about your node and wallet;
     - overview or detailed info (--help for more info)
     - node software version
     - leasers
     - peer connections
     - Waves balances
     - Top leasers
     - Block with the oldest active leaser
     

- Changes

  1. Payreport layout changed.
     The date and time of the startblock and stopblock is now shown.
  2. Config.json file has api_uris added for the new nopeinfo.py
     utility.  

- File changes (+ added, - removed, * updated)
  + nodeinfo.py
  * config.json
  * txoptimizer.py
  * CHANGELOG.txt
  * README.md


Version 3.0.1
-------------
- date 17 january 2021

- Bug fixes

  1. forktester.py
     The function to automatically rollback was commented out. This does not result in rollback, allthough
     the config option "auto_rollback" was possibly set to 'yes' in the config.json file.

  2. README.md
     Textual changes and optimizations after review the file.

- File changes (+ added, - removed, * updated)
  * forktester.py
  * CHANGELOG.txt
  * README.md


Version 3.0
-------------
- date 16 january 2021

- New features

  1.Added tool Forktester (forktester.py)
    Forktester can be used to manage if your node is on fork.
    It uses controlnodes which are used to compare block headers between your node and the control nodes.
    Forktester requests 5 blocks (counting from lastblock-2) and compared these blocks between your node
    and the controlnodes defines in the config.json file.
    Forktester integrates alerting via Telegram. If problems are found (like a fork), alerting is send
    to your telegram account. Rollback can be activated also via forktester.

    Forktester uses settings from config.json.
    For best fork control, execute forktester.py periodically from a job sceduler, like crontab.
    For more help, execute : forktester.py --help

  2.Added tool Open API node discovery (openapinodes.py)
    This tool will try for all your connected peer nodes, if they have a reachable API server.
    The purpose of openapinodes.py script is to reveal nodes which can be used by the forktester.py
    script. Open nodes can be added to the config.json file. The Forktester tool (new feature 1.)
    is an optional extension to use to forktester.py. Both tools can work independently.
    openapinodes.py only needs to be used if you want to find nodes that are open for an API call.
    If you selected some controlnodes and pushed them into the config.json, you only need to run
    the node discovery tool if control nodes disappear from the blockchain or you receive alerts
    from Forktester that control nodes are often out of sync with your node.

- File changes (+ added, - removed, * updated)
  + forktester.py
  + openapinodes.py
  * CHANGELOG.txt
  * config.json
  * README.md


Version 2.3.6
-------------
- date 4 october 2020

- fixed sharing percentage calculation
  In previous version you could set sharing percentages as follows;
  - "feedistributionpercentage" = F%
  - "blockrewarddistributionpercentage" = B%

  This would set the % that would be shared for the transactions fees and for the blockreward separately.
  However, it turned out that the feedsitribution percentage would also be calculated on top of the blockreward percentage.
  This would give undesired percentage and to low sharing results. In this release that is fixed.
  Suppose, you would set in the config file 80% for fee sharing and 90% for blockreward sharing and  
  you had 2 blocks forged and the fees in total were 0.5 waves and the blockreward at current is 6 Waves per block.
  The waves amount what would be shared amongst all leasers would be:
  Waves to share : ( 0.5 x 0.8 ) + ( 12 x 0.9 )  = 11.2 Waves

- Changed some textual output in reports and stio on screen

- Files updated
  - config.json
  - appng.js
  - CHANGELOG.txt

Version 2.3.5
-------------
- date 24 august 2020

- Added blockreward sharing percentage
  In config.json you can now set percentage you want to share with your leasers from the blockreward value.
  The blockreward was added to the Waves blockchain as an added incentive op top of the fee sharing from
  the transaction. Blockreward can be changed by voting from the miners and currently is 6 Waves.

- Files updated
  - appng.js
  - txoptimizer.py
  - README.md
  - config.json
  - CHANGELOG.txt

Version 2.3.4
-------------
- date 05 december 2019

- After payments have been executed by masstx tool, it creates a socialmedia update file.
  This is a summary of the payments, forged blocks and the url where to pickup the html report.
  The file can be used by other tools to post on media like facebook, twitter or
  telegram.
- The social media file can be copied to a local folder or to Cloud provider AWS.
  The settings you need to fill out in the config.json file.
  See README file for explanation

- Files updated
  - masstx.js
  - CHANGELOG.txt
  - README.md
  - config.json

Version 2.3.3
-------------
- date 28 november 2019

- appng and masstx now create a .run file at start. At succesfull termination files are deleted by the tools
  At startup the tools check existence of the runtime locks and alert that they existed abnormally.

- Files updated
  - appng.js
  - masstx.js
  - CHANGELOG.txt
  
Enjoy!

Version 2.3.2
-------------
- date 24 november 2019

- checkPaymentsFile.js now notifies when it is usefull to use txoptimizer.py tool before payment
- masstx.js now is protected against abormal termination. It will notify when started next time
- README.md is updated with a full automatic crontab to collect, validate, optimize and pay.
  See README.md for details.

- Files updated
  - masstx.js
  - CHANGELOG.txt
  - README.md
  - checkPaymentsFile.js

Enjoy!

Version 2.3
-----------
- date 16 november 2019

- For a fresh install, please refer to README.md for all necessary steps to get you up and running.
  It will take you about 1 hour to set parameters and get you started!

This version introduces some nice enhancements and Cloud integration!

- added automatic html report upload to an AWS s3 bucket or a local file destination.
  This way you can present your reports automatically to your users.
  See README.md for details how to setup the config.json values
  
- html report enhancements;
  - The reports now shows the date when it was created by the appng tool.
  - now shows total of no payout recipients and amounts not payed
  - The fee sharing percentage is visible on top of the reports

- logfiles extended with fee sharing percentage

- Files updated
  - appng.js
  - masstx.js
  - CHANGELOG.txt
  - README.md
  - config.json
  - txoptimizer.py

Version 2.2
-----------
- date 10 november 2019

- For a fresh install, please refer to README.md for all necessary steps to get you up and running.
  It will take you about 1 hour to set parameters and get you started!

- This version introduces two major changes and some minor textual changes.

  1. collector tool (appng.js) adds new json data key 'pay'
     When the collector session has finished, the payout data for all recipients
     is saved to a json file. If there are 'nopayoutaddresses' defined in the configfile,
     then these recpients are not saved in the json file and their statistics are lost.
     This release adds a new json key 'pay' to the data for every recipient. 
     Its value will be 'yes' if recipient gets payed and 'no' if it's a 'nopayout' address.
     Default it will be 'yes' for every recipient written to file.
     With this change, the 'nopayout' will be kept per job. It also shows more statistics
     when the other tools run (total amounts and 'nopayout' amount).
     
     Below a sniplet of the json data with the new key 'pay':
     
     {
        "amount": 2117004766,
        "attachment": "USkz6M7kM8X2vR89LHm48WnUK3YdBWV55W4RJ92y8jbV1XviPSzbTCdXWxtx",
        "fee": 100000,
        "pay": "no",
        "recipient": "3PVBCT68cGMgodHuuXu3qftDx8M8s8mgOhj",
        "sender": "3P6qjba4wWLXq6t1G8VaoaVqbUb1dDp8mf1"
    },
    
     NOTE
     The change is backwards compatible with older json files, that do not have the 'pay' key.
     All recpients found in the json data without the 'pay' key, will be assumed 'yes'.
     
  2. Added new tool 'txoptimizer.py' to optimize multiple pending payment jobs
     When a collector run has finished, the payment data is written to file,
     waiting in the queue to get payed by the masstx tool.
     However, if you execute more collector runs before you do your payments, you will
     have multiple pending payment jobs in the queue. Allthough you can perfectly
     execute the payments with masstx, you will execute a masstransaction for every job
     in the queue. This is inefficient and more costly. This can be optimized by using
     the 'txoptimizer.py' tool before you do you your payments.
     Just start the 'txoptimizer.py' tool and it will merge all the json data of the
     pending payments in one json file. It automatically backups original data and writes
     new data and logfiles. It also shows old and new statistics for the pending job.
    
     NOTE
     - runtime python3

- Files updated
  - appng.js
  - checkPaymentsFile.js
  - massPayment.js
  - masstx.js
  - CHANGELOG.txt
  - README.md
  - config.json

- Files added
  - txoptimizer.py

Version 2.1
-----------
- date 12 october 2019

- Please refer to README.md which necessary steps to take to get you up and running.
  It will take you about 1 hour to set parameters and get you started!

- This version is adapted to the feature 14 activation (Block Rewards and Community Driven Monetary Policy)
  Feature 14 has been activated at block 1740000 in the Waves blockchain.
  This change increases currently the block rewards with 6 Waves (initial voted by Miners).
  The rewards of Mrt (miner reward token) is therefore deprecated due to this policy change.
  
- Changes in configurationfile 'config.json'
  - added separate variable for paymentnode "paymentnode_api". This is the node which is used by the payment scripts.
    Now you can use a different node to for payment transactions and another one for collector requests. The latter is
    used by the appng.js script.
    You can also use the same node offcourse.
  - changed variable 'querynodeapikey' to 'paymentnode_apikey'.
    Pay attention if you upgrade to this new version, to map your current configfile values according this change!!

- changed README.md file accordingly and optimized some text

- Files updated
  - config.json
  - appng.js
  - massPayment.js
  - masstx.js
  - CHANGELOG.txt
  - README.md

Version 2.0
-----------
- date 01 februari 2019

- Please refer to README.md which necessary steps to take to get you up and running.
  It will take you about 1 hour to set parameters and get you started!

- Added centralized configuration file 'config.json'
  Now you only have to change values once if you want to change behaviour.
  See README.md for a description of all variables.
  All script files consume these values when started by reading this file.

- If the collector script starts for the first time and hence, it does not find the file 'batchinfo.json',
  then it uses the blockvalues that you configured in the config.json file.
  After the first run, the batchinfo.json file is created and periodically updated and used for subsequent runs.

- added bash script 'start_checker.sh' as simplified starter for your 'node checkPaymentsFile.js'
  The script will just execute 'node checkPaymentsFile.js' for you. That's why this is the 'lazy' version

- changed README.md file accordingly and optimized some text

- Files updated
  - appng.js
  - checkPaymentsFile.js
  - massPayment.js
  - masstx.js
  - CHANGELOG.txt
  - README.md

- Files added
  - config.json
  - start_checker.sh

Version 1.2
-----------
- date 28 december 2018

- Added masstransfer support with script 'masstx.js'

  You can now choose to do payments with masstransfers, which optimizes your transfer costs for the payments.
  Masstransfer is a type 11 transaction which can be done for one asset at once (like Waves or Mrt). It adds
  up to 100 recipients and their fee amounts in one massive transaction. The cost depends on the total transactions
  added, but is already benefitial if you have only a couple of transactions. The exact amount depends if you only pay
  Waves or also Mrt and depends on the number of transactions. But no worries, if you run the payment checker
  with the 'node checkPaymentsFile.js', you get a nice overview of the payments to do and the cost involved if
  you were to pay with single transaction or with masstransfers.
  You can interchangelly keep on using single transactions or mass transfers. Use payment check tool to calculate
  for you which is cheapest.

- If masstransfer is used for payments, it appends the transactionlog to the logfile of the current batch, which
  was created earlier by the collector tool 'appng.js'

  NOTE:
  This is not the case for single transactions. Sorry for that, but my time is scarse and it seems that 9 out of
  10 times masstransfer will be used. Maybe in future updates I'll append it also for single transactions. Anyway
  it's only handy for reference in a later stage and not really needed.

- Possibility to start masstransfers after a crash or after payment disruption is not ported for now.

  With the existing single transaction tool (massPayment.js), every transaction is printed on the screen with
  a number. After a crash, you have the option to start it, just from where it crashed. However, with masstransfers
  you have a duration optimization. Imagine you have 128 transactions to do. If you were to pay with the single
  transaction tool (massPayment.js), it would take 128 txs, 1 sec per txs, total 2 minutes and 8 secs.
  If you would pay with masstransfers (masstx.js), it would take 2 masstxs, 1 sec per masstxs, totals 2 secs :-)
  Chances of a crash at this perticular short moment is low.

- checkPaymentsFile.js tool now shows costs for single transactions and for mass transfers

- Files updated
  - CHANGELOG.txt
  - checkPaymentsFile.js
  - README.md

- Files added
  - masstx.js

Version 1.1
-----------
- date 8 november 2018

- Added queueing mechanism, that stores a batchID for every collection session when finished
  
  Collector sessions ('node appng.js OR start_collector.sh') are added to a payment queue file (payqueue.dat) when finished.
  This way you can run session after session, without doing immediate checks or payments if you like. Every session
  is written with it's batchID to the queue file and the payoutinfo is logged to payoutfiles with it's batchID added
  to the filenames.
  The checkPaymentsFile.js script for checking and the massPayment.js for actual payments automatically scans the
  queue file and sequentially do their respective jobs with a nice screen print of results

- Checking payments with checkPaymentsFile.js now automatically scans the payqueue.dat file and ends with the sum of
  all payment jobs. This way you get an idea of the total payments that will be done

- Removed the fee calulation for tokens rbx, mer and bearwaves from the script (sorry w0utje).
  Due to the feature 'sponsored coins' this is obsolete.

- Added various error handlers, to avoid script crashes or detect when people would edit files by hand
  - like no payqueue.dat file
  - duplicate batchIDs would be detected (this only happens if you would modify the batchinfo.json by hand,
    which normally is not needed at all)
  - missing batchinfo.json file
  - missing directory where succesfull payout files will be stored (it's autmatically created then)
  - detect when the payment stop block is larger then the current blockheight of the blockchain
  - and more...

- MassPayment.js is now modified to handle a crashed session, if the payqueue has multiple jobs.
  If a massPayment session crashed, just make note of the batchID and the last succesfull transaction counter,
  and edit the variables const crashconfig = {
			=>	batchidstart: '0',
			=>	transactionstart: '0' }

  Change the numbers in the massPayment.js file and start the massPayment session again and you should be fine.
  NOTE: The transactionstart nr should be the last succesfull number + 1

- MassPayment.js:
  - After succesfull ending of all transactions of a batch, the batchID is removed
    from the payqueue.dat
  - After succesfull ending of all transactions of a batch, the leaserpayout and logfiles are moved
    to the folder paymentDone/
    This gives you the possibility to check afterwards payment jobs with logs.
  - automatically created a backup of the payqueue.dat file, which holds all payment batches 

- Added CHANGELOG.txt to track changes to the versions of the script

- Added various minor cosmetic errors of the script
================================================================================================================
 * V 1.0
 * Plukkie's edit of W0utjes's LPoSDistributor V 2.0.3
 *
 * CHANGES
 * - Created seperate batchinfo.json for initial key/value pairs, which are updated after a successfull run
 *   After each succesfull run the following XXXXX values are updated;
 *       "paymentid": "XXXX",
 *       "paystartblock": "XXXXX",
 *       "paystopblock": "XXXX",
 *   The difference between paystart/paystop block will be the blockwindowsize setting
 *
 * - Possibility to set blockwindowsize = X, where X defines how many blocks will be scanned for payments
 *
 * - Possibility to set wallet addresses in the variable 'nofeearray [ ];' which will NOT get revenue sharing.
 *   This can be used if you are rewarded with leases, which do not expect payout from you
 *   Default it's empty, so all incoming leasers get revenue sharing
 *
 * - Added paymentid which complements the '<leaserpayoutfilename> + <paymentid>' to make the payoutfiles unique to every session.
 *   All files are stored now and actual payouts with masspayment script can be done for every unique payout files
 *
 * - Added logfile creation after a succesfull session which summarizes relevant info, which can be used for reference or analysis
 *   This is the '<leaserpayoutfilename>.log'
 *
 * - Added bash script 'start_collector.sh' which optimizes some runtime variables of 'node' binary
 *   This can be used if regular execution of the appng.js script gives problems and terminates with errors
 * ================================================================================================================= */

